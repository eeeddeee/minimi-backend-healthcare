// services/reportExportService.js
import PDFDocument from "pdfkit";
import { uploadBufferToS3 } from "../utils/s3.js";
import { getSignedUrlForKey } from "../utils/s3.js";
import Report from "../models/patientReportModel.js";

export const exportReportToPdf = async (reportId) => {
  const report = await Report.findById(reportId)
    .populate({ path: "generatedBy", select: "firstName lastName" })
    .populate({ path: "patientId", select: "patientNumber" })
    .lean();

  if (!report) throw { statusCode: 404, message: "Report not found" };

  // Build a simple PDF
  const doc = new PDFDocument({ margin: 40 });
  const chunks = [];
  doc.on("data", (c) => chunks.push(c));
  const done = new Promise((resolve) => doc.on("end", resolve));

  doc.fontSize(18).text("Patient Health Report", { align: "center" });
  doc.moveDown();
  doc.fontSize(12).text(`Patient #: ${report.patientId?.patientNumber || "-"}`);
  doc.text(`Type: ${report.type}`);
  doc.text(
    `Period: ${new Date(report.period.start).toDateString()} - ${new Date(report.period.end).toDateString()}`
  );
  doc.text(
    `Generated By: ${report.generatedBy?.firstName || ""} ${report.generatedBy?.lastName || ""}`
  );
  doc.moveDown();
  doc.fontSize(14).text("Summary");
  doc.fontSize(12).text(report.content?.summary || "-", { paragraphGap: 8 });
  doc.moveDown();

  doc.fontSize(14).text("Metrics");
  doc
    .fontSize(12)
    .text(`Medication Adherence: ${report.content?.medicationAdherence ?? 0}%`);
  doc.text(
    `Activity Participation: ${report.content?.activityParticipation ?? 0}%`
  );
  doc.text(`Incident Count: ${report.content?.incidentCount ?? 0}`);
  doc.moveDown();

  doc.fontSize(14).text("Behavior Trends");
  (report.content?.behaviorTrends || []).forEach((t) => {
    doc
      .fontSize(12)
      .text(`- ${t.labels?.[0] || "Mood"}: ${t.values?.[0] || 0}`);
  });

  if (report.content?.notes) {
    doc.moveDown();
    doc.fontSize(14).text("Notes");
    doc.fontSize(12).text(report.content.notes);
  }

  doc.end();
  await done;

  const buffer = Buffer.concat(chunks);
  const key = `reports/${reportId}.pdf`;
  await uploadBufferToS3({ buffer, key, contentType: "application/pdf" });
  const url = await getSignedUrlForKey(key, 600); // 10 mins

  return { key, url };
};
